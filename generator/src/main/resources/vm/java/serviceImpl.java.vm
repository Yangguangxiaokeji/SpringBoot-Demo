package ${packageName}.service.impl;

import ${pageResultPath}.PageResult;
import ${packageName}.domain.${ClassName}PO;
import ${packageName}.dto.${ClassName}DTO;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.${ClassName}Service;
import ${packageName}.vo.${ClassName}VO;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.stereotype.Service;
#foreach ($column in $columns)
#if($column.javaType =="Date")
import java.util.Date;
#end
#end
import javax.annotation.Resource;
import java.util.List;

/**
 * ${functionName}Service实现
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements ${ClassName}Service {

    @Resource
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 通过${pkColumn.javaField}查询单条数据
     *
     * @param ${pkColumn.javaField} 主键
     * @return 实例对象
     */
    @Override
    public ${ClassName}PO queryById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.selectByPrimaryKey(${pkColumn.javaField});
    }

    /**
     * 条件查询列表页
     *
     * @param condition 查询条件
     * @return 查询结果
     */
    @Override
    public PageResult<${ClassName}VO> listByLikeCondition(${ClassName}DTO condition) {
        Integer pageNum = condition.getPageNum();
        Integer pageSize = condition.getPageSize();
        PageHelper.startPage(pageNum, pageSize);

        List<${ClassName}VO> ${className}List= ${className}Mapper.listByLikeCondition(condition);

        PageInfo<${ClassName}VO> pageInfo = new PageInfo<>(${className}List);
        return PageResult.<${ClassName}VO>builder()
                .data(pageInfo.getList())
                .total(pageInfo.getTotal())
                .currentPage(pageNum)
                .pageSize(pageSize)
                .build();
    }

    /**
    * 新增数据
    *
    * @param ${className}PO 实例对象
    * @return 实例对象
    */
    @Override
    public int insert(${ClassName}PO ${className}PO){
        return ${className}Mapper.insertSelective(${className}PO);
    }

    /**
     * 修改数据
     *
     * @param ${className}PO 实例对象
     * @return 实例对象
     */
    @Override
    public int updateById(${ClassName}PO ${className}PO) {
        return ${className}Mapper.updateByPrimaryKeySelective(${className}PO);
    }

    /**
     * 批量删除
     *
     * @param ${pkColumn.javaField}s 主键集合
     * @return 影响行数
     */
    @Override
    public int deleteBatchByIds(List<${pkColumn.javaType}> ${pkColumn.javaField}s) {
        return ${className}Mapper.deleteBatchByPrimaryKeys(${pkColumn.javaField}s);
    }

    /**
     * 通过主键删除数据
     *
     * @param ${pkColumn.javaField} 主键
     * @return 是否成功
     */
    @Override
    public  int deleteById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.deleteByPrimaryKey(${pkColumn.javaField});
    }


}
