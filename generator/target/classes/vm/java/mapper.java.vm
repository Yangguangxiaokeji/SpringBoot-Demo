package ${packageName}.mapper;

import ${packageName}.domain.${ClassName}PO;
import ${packageName}.dto.${ClassName}DTO;
import org.apache.ibatis.annotations.Param;
import ${packageName}.vo.${ClassName}VO;
    #foreach ($column in $columns)
        #if($column.javaType =="Date")
        import java.util.Date;
        #end
    #end
import java.util.List;


/**
 * ${functionName}Mapper接口
 *
 * @author ${author}
 * @date ${datetime}
 */
public interface ${ClassName}Mapper {

    /**
     * 通过${pkColumn.javaField}查询单条数据
     *
     * @param ${pkColumn.javaField} 主键
     * @return 实例对象
     */
     ${ClassName}PO selectByPrimaryKey(@Param("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 根据条件模糊查询符合数据集合
     *
     * @param condition 查询条件
     * @return 查询结果
     */
    List<${ClassName}VO> listByLikeCondition(${ClassName}DTO condition);

    /**
    * 根据条件等值查询符合数据集合
    *
    * @param condition 查询条件
    * @return 查询结果
    */
    List<${ClassName}VO> listByEqualCondition(${ClassName}DTO condition);

    /**
     * 新增数据
     * 字段为null会直接插入，会使数据库默认值失效，使用需要注意
     * @param ${className}PO 实例对象
     * @return 实例对象
     */
    int insert(${ClassName}PO ${className}PO);

    /**
     * 新增数据，字段为null不进行填充
     *
     * @param ${className}PO 实例对象
     * @return 实例对象
     */
    int insertSelective(PurchaseRelationPO purchaseRelationPO);

    /**
     * 批量新增数据
     *
     * @param ${className}POList 实例对象
     * @return 实例对象
     */
    int insertBatch(@Param("${className}POList") List<${ClassName}PO> ${className}POList);

    /**
     * 根据主键修改全部字段
     *
     * @param ${className}PO 实例对象
     * @return 实例对象
     */
    int updateByPrimaryKey(${ClassName}PO ${className}PO);

    /**
     * 根据主键只修改不为空的字段
     *
     * @param ${className}PO 实例对象
     * @return 实例对象
     */
    int updateByPrimaryKeySelective(${ClassName}PO ${className}PO);

    /**
     * 通过主键删除数据
     *
     * @param ${pkColumn.javaField} 主键
     * @return 是否成功
     */
    int deleteByPrimaryKey(@Param("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 批量删除
     *
     * @param ${pkColumn.javaField}s 主键集合
     * @return 影响行数
     */
    int deleteBatchByPrimaryKeys(@Param("${pkColumn.javaField}s") List<${pkColumn.javaType}> ${pkColumn.javaField}s);


}
